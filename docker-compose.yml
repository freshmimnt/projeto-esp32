services:
  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: postgres
      POSTGRES_DB: esp32db
      POSTGRES_PORT: 5432
    ports:
      - 5432:5432
    volumes:
      - db:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/create_tables.sql

  backend:
    build:
      context: backend
      dockerfile: Dockerfile.dev
    container_name: backend
    restart: always
    working_dir: /app
    networks:
      - my_network
    volumes:
      - ./backend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - db

  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile.dev
    container_name: frontend
    restart: always
    working_dir: /app
    networks:
      - my_network
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "5173:5173"

volumes:
  db:
    driver: local

networks:
  my_network:
    driver: bridge
# primeiro faz docker compose up --build, para fazer o build da bd
# depois faz docker compose up -d para pôr o container a funcionar e docker compose down para parar de funcionar
# com isto já não precisas fazer npm run dev para o frontend ou backend, eu transformei os dois em serviços docker
